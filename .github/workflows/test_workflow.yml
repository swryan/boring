
name: BORING Tests

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allow running the workflow manually from the Actions tab
  workflow_dispatch:

permissions: {}

jobs:

  tests:

    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:

          # test baseline versions on Ubuntu
          - NAME: Ubuntu Baseline
            OS: ubuntu-latest
            PY: '3.11'
            NUMPY: '1.26'
            SCIPY: '1.11'
            PETSc: '3.18'
            PYOPTSPARSE: 'v2.10.1'
            SNOPT: '7.7'

          # test baseline versions on Windows
          - NAME: Windows Baseline
            OS: windows-latest
            PY: '3.11'
            NUMPY: '1.24'
            SCIPY: '1.11'
            PYOPTSPARSE: '2.10.1'

    runs-on: ${{ matrix.OS }}

    name: ${{ matrix.NAME }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #${GITHUB_RUN_NUMBER}"
          echo "Run ID: ${GITHUB_RUN_ID}"
          echo "Testing: ${GITHUB_REPOSITORY}"
          echo "Triggered by: ${GITHUB_EVENT_NAME}"
          echo "Initiated by: ${GITHUB_ACTOR}"
          echo "============================================================="

      - name: Create SSH key
        if: (matrix.SNOPT || matrix.BUILD_DOCS)
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.PY }}
          conda-version: "*"
          channels: conda-forge,defaults
          channel-priority: true

      - name: Install BORING
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

          pip install packaging

          echo "============================================================="
          echo "Install BORING"
          echo "============================================================="
          python -m pip install .

      - name: Install PETSc
        if: matrix.PETSc
        run: |
          echo "============================================================="
          echo "Install PETSc"
          echo "============================================================="
          conda install mpi4py petsc4py=${{ matrix.PETSc }} -q -y

          echo "OMPI_MCA_rmaps_base_oversubscribe=1" >> $GITHUB_ENV

      - name: Install pyOptSparse
        if: matrix.PYOPTSPARSE
        run: |
          echo "============================================================="
          echo "Install pyoptsparse"
          echo "============================================================="

          if [[ "${{ matrix.OS }}" == "windows-latest" ]]; then
            if [[ "${{ matrix.SNOPT }}" ]]; then
              echo "SNOPT v${{ matrix.SNOPT }} was requested but SNOPT is not available on Windows"
            fi

            conda install -c conda-forge pyoptsparse=${{ matrix.PYOPTSPARSE }} -q -y
          else
            python -m pip install git+https://github.com/OpenMDAO/build_pyoptsparse

            BRANCH="-b ${{ matrix.PYOPTSPARSE }}"

            if [[ "${{ matrix.SNOPT }}" == "7.7" && "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
              echo "  > Secure copying SNOPT 7.7 over SSH"
              mkdir SNOPT
              scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
              SNOPT="-s SNOPT/src"
            elif [[ "${{ matrix.SNOPT }}" == "7.2" && "${{ secrets.SNOPT_LOCATION_72 }}" ]]; then
              echo "  > Secure copying SNOPT 7.2 over SSH"
              mkdir SNOPT
              scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT
              SNOPT="-s SNOPT/source"
            elif [[ "${{ matrix.SNOPT }}" ]]; then
              echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
            fi

            build_pyoptsparse $BRANCH $SNOPT
          fi

      - name: Display environment info
        id: env_info
        continue-on-error: true
        run: |
          conda info
          conda list

      - name: Run tests
        run: |
          echo "============================================================="
          echo "Run tests (from directory other than repo root)"
          echo "============================================================="
          cd $HOME
          testflo -n 2 boring --timeout=240 --show_skipped --durations=20
